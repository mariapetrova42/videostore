DMS Videostore
Dora Baciu
Maria Petrova
Sakeena Younus

--------------------------------------------------------------------------------------------------------

0.
Goals, Description, & Issues Faced
-------------------------------------

	The goal of Phase 3 of this project was to create an interface that can be used to access and update the information in our videostore database, which we designed and created in the previous phases of the project. 
	
	The database schema is as follows: The DMS Videostore franchise has several store locations. Members of the videostore network can visit these locations and rent either disks, or video players. The disks contain movies in either blu-ray or DVD format, and each has an associated cost of rental per day. Some of the video players have special features. The implementation of this videostore keeps track of the rentals and allows members to:
	- Search a movie by genre, title, actor name, or director name
	- Print the item_IDs and titles of movies directed by a certain director, starring a certain actor, or with a certain title
	- Checkout a movie
	- Return a movie
	- Reserve a movie
	- Print the list of movies that they've rented and reserved
	- Calculate amount due for a given checked-out movie based on current date
	- Log out of the application
Special members called administrators also exist. Admins can:
	- Do everything a customer can
	- Find customer information based on name or member ID
	- Print the name and location of the different store branches
	- Print the top 10 most frequent renters and the number of movies each one has rented
	- Print the top 10 most rented movies
	- Print the 10 most popular movies checked out in a given year
	
	
Before being able to reach these functions, members (regular and admin) must log into the application using their member username and password. The home login page will also have an option to create a new regular member account, which will be added to the database. A new administrator account can only be created by an already-existing admin. 
	
	Things we edited from the original design :
		- Transactions are associated with stores, but the admin 'search for top renters' is not store-specific. Likewise for the top rented movies and the top movies rented in a given year
		- There are no fines, only amount due for a checkout.
		- Overall database design was changed, with players and movies essentially being condensed into a single item table.
		- Producer attribute from movies was elimintated, since the producer is often the same as the director and this information was deemed unecessary
		- An is_admin variable was added to the member enitity, to denote administrators versus customers
		- The user_id attribute was renamed to 'username' to keep it from getting confused with member_id. Usernames are used to log in, member_id denotes the unique member identifier within the database
	
	One of the first problems we encountered in Phase 3 was connecting to the server. $_POST was not working properly, though we managed to debug and fix the issue with some advice from Professor Banerji.
	
	There were many other problems encountered, including but not limited to the following:
		- Figuring out the queries needed to execute the given functionalities
		- Re-writing the tables so that it was possible to write intelligeble queries
		- Maintaining various sessions to keep continuity between different web pages (staying in the same member account, going to the borrow page for a given item from the search page)
		- Populating the tables with data, specifically transactions so that there was a good variety of transactions for all of the items. 
		- Making the transactions functional
		
	Functionalities that we wanted to implement, but could not at the the moment:
		- Make smooth transitions when going back to home page (ex, from 'borrow' page to 'welcome' page)
		- Checking that the customer can only return a movie that they themselves have rented out
		- Admin: Add or delete a movie copy from the database
		- Admin: Make existing customer an administrator (creating new customer would be the same as a sign up)
		- Admin: Find the average amount paid for rental per customer (would have to link borrow and return transactions somehow)
		- Verify that the username is unique when a new member signs up
		- Going through and standardizing page presentations to be uniform and consistent with headers, footers, etc

--------------------------------------------------------------------------------------------------------

1.
Description of Implementation
-------------------------------------

	Our implementatation of this project involved creating the videostore database itself, populating the tables with data, and writing a front-end application using PHP, HTML, and CSS. We also took time to create a pleasant user interface for the menu-driven application, as we all share an interest in design. 
	See the previous section for an extended description of the features and problems faced in Phase 3.

--------------------------------------------------------------------------------------------------------

2.
SQL Commands - Table Creation (See separate SQL file for data)
-------------------------------------

CREATE TABLE `item` (
  `item_id` int(11) NOT NULL,
  `status` varchar(30) NOT NULL DEFAULT 'available',
  `rent_p_day` decimal(4,2) NOT NULL,
  `item_type` varchar(30) NOT NULL,
  `movie_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

CREATE TABLE `member` (
  `member_id` int(11) NOT NULL,
  `member_first_name` varchar(50) NOT NULL,
  `member_last_name` varchar(50) NOT NULL,
  `member_email` varchar(50) NOT NULL,
  `member_username` varchar(50) NOT NULL,
  `member_password` varchar(50) NOT NULL,
  `is_admin` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

CREATE TABLE `movie` (
  `movie_id` int(11) NOT NULL,
  `movie_genre` varchar(30) NOT NULL,
  `movie_title` varchar(50) NOT NULL,
  `movie_year` year(4) NOT NULL,
  `movie_director` varchar(50) NOT NULL,
  `movie_actor1` varchar(50) NOT NULL,
  `movie_actor2` varchar(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

CREATE TABLE `store` (
  `store_id` int(11) NOT NULL,
  `store_phone` varchar(10) NOT NULL,
  `store_street1` varchar(50) NOT NULL,
  `store_street2` varchar(50) NOT NULL,
  `store_city` varchar(30) NOT NULL,
  `store_state` varchar(30) NOT NULL,
  `store_zipcode` varchar(5) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

CREATE TABLE `transaction` (
  `tran_id` int(11) NOT NULL,
  `tran_date` date DEFAULT NULL,
  `tran_type` varchar(30) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `store_id` int(11) DEFAULT NULL,
  `member_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

ALTER TABLE `item`
  ADD PRIMARY KEY (`item_id`),
  ADD KEY `movie_id` (`movie_id`);
  
ALTER TABLE `member`
  ADD PRIMARY KEY (`member_id`),
  ADD UNIQUE KEY `member_username` (`member_username`);

ALTER TABLE `movie`
  ADD PRIMARY KEY (`movie_id`);

ALTER TABLE `store`
  ADD PRIMARY KEY (`store_id`);
  
ALTER TABLE `transaction`
  ADD PRIMARY KEY (`tran_id`),
  ADD KEY `item_id` (`item_id`),
  ADD KEY `store_id` (`store_id`),
  ADD KEY `member_id` (`member_id`);
  
ALTER TABLE `item`
  MODIFY `item_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=160;

ALTER TABLE `member`
  MODIFY `member_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;

ALTER TABLE `movie`
  MODIFY `movie_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=23;

ALTER TABLE `store`
  MODIFY `store_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

ALTER TABLE `transaction`
  MODIFY `tran_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1290;

ALTER TABLE `item`
  ADD CONSTRAINT `item_ibfk_1` FOREIGN KEY (`movie_id`) REFERENCES `movie` (`movie_id`);

ALTER TABLE `transaction`
  ADD CONSTRAINT `transaction_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `item` (`item_id`),
  ADD CONSTRAINT `transaction_ibfk_2` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`),
  ADD CONSTRAINT `transaction_ibfk_3` FOREIGN KEY (`member_id`) REFERENCES `member` (`member_id`);
  
COMMIT;

  





